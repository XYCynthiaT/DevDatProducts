pbeta(0.5, 2, 1)
qbeta(0.5, 2, 1)
0.56 + c(-1, 1)*qnorm(0.025)*sqrt(0.56*0.44/100)
knitr::opts_chunk$set(echo = FALSE)
fit1 <- lm(mpg ~ factor(am), data =mtcars1)
mtcars1 <- mtcars
mtcars1$am <- ifelse(mtcars$am == 1, "automatic", "manual")
t.am <- t.test(mpg ~ factor(am), data = mtcars1, alternative = "greater", var.equal = TRUE)
# fitting lm
fit1 <- lm(mpg ~ factor(am), data =mtcars1)
fit10 <- lm(mpg ~ ., data =mtcars1)
summary(fit1)
summary(fit10)
anova(fit1, fit10)
fit2 <- lm(mpg ~ factor(am) + factor(cyl), data =mtcars1)
anova(fit1, fit2)
fit2
summary(fit2)
install.packages("car")
library(car)
vif(fit1)
vif(fit10)
anova(fit1, fit10)
summary(fit10)
anova(fit1, fit2)
vif(fit2)
?vif
plot(fit2)
t.am
summary(fit1)
vif(fit3)
fit3 <- lm(mpg ~ factor(am) + factor(cyl) + disp, data =mtcars1)
vif(fit3)
Anova(fit1, fit2, fit3)
anova(fit1, fit2, fit3)
head(mtcars)
fit4 <- lm(mpg ~ factor(am) + factor(cyl) + hp, data =mtcars1)
vif(fit4)
anova(fit1, fit2, fit4)
fit5 <- lm(mpg ~ factor(am) + factor(cyl) + hp + drat, data =mtcars1)
vif(fit5)
anova(fit1, fit2, fit4, fit5)
fit6 <- lm(mpg ~ factor(am) + factor(cyl) + hp + wt, data =mtcars1)
vif(fit6)
anova(fit1, fit2, fit4, fit6)
fit7 <- lm(mpg ~ factor(am) + factor(cyl) + hp + wt + qsec, data =mtcars1)
vif(fit7)
anova(fit1, fit2, fit4, fit6, fit7) # wt increased variance
fit8 <- lm(mpg ~ factor(am) + factor(cyl) + hp + wt + factor(vs), data =mtcars1)
vif(fit8)
anova(fit1, fit2, fit4, fit6, fit8)
fit9 <- lm(mpg ~ factor(am) + factor(cyl) + hp + wt + factor(gear), data =mtcars1)
vif(fit9)
anova(fit1, fit2, fit4, fit6, fit9) # unnecessary
fit10 <- lm(mpg ~ factor(am) + factor(cyl) + hp + wt + factor(carb), data =mtcars1)
vif(fit10)
anova(fit1, fit2, fit4, fit6, fit10) # unnecessary
fit4
fit6
summary(fit6)
p2 <- ggplot(mtcars1, aes(wt, mpg, color = am)) +
geom_line() +
geom_point() +
xlab("Weight (1000lbs)") +
ylab("mpg (miles/(US) gallon") +
ggtitle("The Relationship Between MPG Transmission Adjusted by Weight")
library(ggplot2)
p2 <- ggplot(mtcars1, aes(wt, mpg, color = am)) +
geom_line() +
geom_point() +
xlab("Weight (1000lbs)") +
ylab("mpg (miles/(US) gallon") +
ggtitle("The Relationship Between MPG Transmission Adjusted by Weight")
p2
p2 <- ggplot(mtcars1, aes(wt, mpg, color = am)) +
geom_point() +
xlab("Weight (1000lbs)") +
ylab("mpg (miles/(US) gallon") +
ggtitle("The Relationship Between MPG Transmission Adjusted by Weight")
p2
p3 <- ggplot(mtcars1, aes(hp, mpg, color = am)) +
geom_point() +
xlab("Gross horsepower") +
ylab("mpg (miles/(US) gallon") +
ggtitle("The Relationship Between MPG Transmission Adjusted by Gross horsepower")
p3
p4 <- ggplot(mtcars1, aes(cyl, mpg)) +
geom_point(aes(color = am)) +
geom_boxplot(aes(fill = am), alpha = 1/5) +
xlab("Number of Cylinders") +
ylab("mpg (miles/(US) gallon") +
ggtitle("The Relationship Between MPG Transmission Adjusted by Number of Cylinders")
p4
p4 <- ggplot(mtcars1, aes(factor(cyl), mpg)) +
geom_point(aes(color = am)) +
geom_boxplot(aes(fill = am), alpha = 1/5) +
xlab("Number of Cylinders") +
ylab("mpg (miles/(US) gallon") +
ggtitle("The Relationship Between MPG Transmission Adjusted by Number of Cylinders")
g4
p4
library(gridExtra)
?grid.arrange
grid.arrange(p1, p2, p3, p4, bottom = "Figure 1. The relationship between MPG and a set of variables", nrow = 2)
p1 <- ggplot(mtcars1, aes(am, mpg, fill = am)) +
geom_boxplot() +
xlab("Transmission") +
ylab("mpg (miles/(US) gallon") +
ggtitle("The Relationship Between MPG and Transmission")
grid.arrange(p1, p2, p3, p4, bottom = "Figure 1. The relationship between MPG and a set of variables", nrow = 2)
p1 <- ggplot(mtcars1, aes(am, mpg, fill = am)) +
geom_boxplot() +
xlab("Transmission") +
ylab("mpg (miles/(US) gallon") +
ggtitle("MPG vs Transmission")
p2 <- ggplot(mtcars1, aes(wt, mpg, color = am)) +
geom_point() +
xlab("Weight (1000lbs)") +
ylab("mpg (miles/(US) gallon") +
ggtitle("MPG vs Transmission and Weight")
p3 <- ggplot(mtcars1, aes(hp, mpg, color = am)) +
geom_point() +
xlab("Gross horsepower") +
ylab("mpg (miles/(US) gallon") +
ggtitle("MPG vs Transmission and Gross horsepower")
p4 <- ggplot(mtcars1, aes(factor(cyl), mpg)) +
geom_point(aes(color = am)) +
geom_boxplot(aes(fill = am), alpha = 1/5) +
xlab("Number of Cylinders") +
ylab("mpg (miles/(US) gallon") +
ggtitle("MPG vs Transmission and the Number of Cylinders")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, bottom = "Figure 1. The relationship between MPG and a set of variables", nrow = 2)
p3 <- ggplot(mtcars1, aes(hp, mpg, color = am)) +
geom_point() +
xlab("Gross horsepower") +
ylab("mpg (miles/(US) gallon") +
ggtitle("MPG vs Transmission and \n Gross horsepower")
p4 <- ggplot(mtcars1, aes(factor(cyl), mpg)) +
geom_point(aes(color = am)) +
geom_boxplot(aes(fill = am), alpha = 1/5) +
xlab("Number of Cylinders") +
ylab("mpg (miles/(US) gallon") +
ggtitle("MPG vs Transmission and \n the Number of Cylinders")
grid.arrange(p1, p2, p3, p4, bottom = "Figure 1. The relationship between MPG and a set of variables", nrow = 2)
coff(fit6)
cofficients(fit6)
coefficients(fit6)
par(mfrow = c(2, 2))
plot(fit6)
mean(fit6$residuals)
knitr::opts_chunk$set(echo = FALSE)
?fig.width
knitr::opts_chunk$set(echo = FALSE)
mtcars1 <- mtcars
mtcars1$am <- ifelse(mtcars$am == 1, "automatic", "manual")
library(car)
fit1 <- lm(mpg ~ factor(am), data =mtcars1)
fit2 <- lm(mpg ~ factor(am) + factor(cyl), data =mtcars1)
anova(fit1, fit2)
vif(fit2)
fit3 <- lm(mpg ~ factor(am) + factor(cyl) + disp, data =mtcars1)
vif(fit3)
anova(fit1, fit2, fit3) # it unnessary to include disp as a regressor
fit4 <- lm(mpg ~ factor(am) + factor(cyl) + hp, data =mtcars1)
vif(fit4)
anova(fit1, fit2, fit4) # hp increased variance
fit5 <- lm(mpg ~ factor(am) + factor(cyl) + hp + drat, data =mtcars1)
vif(fit5)
anova(fit1, fit2, fit4, fit5) # unnessary
fit6 <- lm(mpg ~ factor(am) + factor(cyl) + hp + wt, data =mtcars1) # selected!
vif(fit6)
anova(fit1, fit2, fit4, fit6) # wt increased variance
fit7 <- lm(mpg ~ factor(am) + factor(cyl) + hp + wt + qsec, data =mtcars1)
vif(fit7)
anova(fit1, fit2, fit4, fit6, fit7) # unnecessary
fit8 <- lm(mpg ~ factor(am) + factor(cyl) + hp + wt + factor(vs), data =mtcars1)
vif(fit8)
anova(fit1, fit2, fit4, fit6, fit8) # unnecessary
fit9 <- lm(mpg ~ factor(am) + factor(cyl) + hp + wt + factor(gear), data =mtcars1)
vif(fit9)
anova(fit1, fit2, fit4, fit6, fit9) # unnecessary
fit10 <- lm(mpg ~ factor(am) + factor(cyl) + hp + wt + factor(carb), data =mtcars1)
vif(fit10)
anova(fit1, fit2, fit4, fit6, fit10) # unnecessary
summary(fit6)
?mtcars
knitr::opts_chunk$set(echo = FALSE)
t.am <- t.test(mpg ~ factor(am), data = mtcars1, alternative = "less")
fullModelFit <- lm(mpg ~ ., data = mtcars)
stepFit <- step(fullModelFit)
summary(stepFit) # results hidden
sum((abs(dfbetas(stepFit)))>1)
summary(stepFit)$coeff # results hidden
?step
step()
step
lm
lm(mpg ~ factor(am), data = mtcars)
lm(mpg ~ factor(am), data = mtcars)$model
?formula
paste0("x", 1:25)
xnam <- paste0("x", 1:25)
(fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+"))))
terms <- names(mtcars)
fits <- vector("list", length = length(terms)-1)
seq_along(terms)
!"terms[i]"wt %in% c("mpg", "am")
!"wt" %in% c("mpg", "am")
fomulas <- vector("list", length = length(terms)-1)
fomulas[[1]] <- as.formula(mpg ~ factor(am))
fomulas
class(mtcars[, "wt"])
?mtcars
head(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
str(mtcats)
str(mtcars)
class(mtcars[,"cyl"])
fomulas[[1]]
terms <- names(mtcars)[-c("mpg", "am")]
terms[-1]
terms["am"]
which(terms == c("mpg", "am"))
grep(c("mpg", "am"), terms)
terms[-which(terms == outcome)]
outcome <- "mpg"
terms[-which(terms == outcome)]
ref <- "am"
terms <- terms[-which(terms == outcome)]
terms[-which(terms == ref)]
terms <- terms[-which(terms == ref)]
fits <- vector("list", length = length(terms)-1)
fits <- vector("list", length = length(terms))
fits <- vector("list", length = length(terms) + 1)
fomulas <- vector("list", length = length(terms) + 1)
fomulas[[1]] <- as.formula(mpg ~ factor(am))
as.formula(outcome ~ ref)
as.formula(paste(outcome, "~", ref))
fomulas[[1]] <- as.formula(paste(outcome, "~", ref))
fomulas[[1]]
paste(fomulas[[1]], "+", terms[1])
paste(outcome, "~", ref)
fomulas[[1]] <- paste(outcome, "~", ref)
paste(fomulas[[1]], "+", terms[1])
lm(as.formula(fomulas[[1]]))
lm(as.formula(fomulas[[1]]), data = mtcars)
lm(mpg~am, data=mtcars)
fits[[1]] <- lm(as.formula(fomulas[[1]]), data = mtcars)
fits[[1:2]]
fits[[1]]
fits[[2]]
fits[[1:2]]
fits[1:2]
fomulas[[1+1]] <- paste(fomulas[[1]], "+", terms[1])
fits[[1+1]] <- lm(as.formula(fomulas[[1+1]]), data = mtcars)
fomulas[[2]]
fits[[2]]
fits[1:2]
anova(fits[1:2])
unlist(fits[1:2])
x <- lm(mpg ~ am, data = mtcars)
anova(fits[1:1+1])
anova(fits[[1]], fits[[2]])
anova(unlist(fits[1:2]))
class(fits[[1]])
y <- lm(mpg ~ cly, data = mtcars)
y <- lm(mpg ~ cyl, data = mtcars)
c(x, y)
z <- c(x, y)
class(z)
anova(z)
?anova
anova(fits[[1]], fits[[2]])
z <- anova(fits[[1]], fits[[2]])
z$`Pr(>F)`
summary(z)
fomulas[[1]] <- paste(outcome, "~", ref)
fits[[1]] <- lm(as.formula(fomulas[[1]]), data = mtcars)
for (i in seq_along(terms)) {
fomulas[[i+1]] <- paste(fomulas[[i]], "+", terms[i])
fits[[i+1]] <- lm(as.formula(fomulas[[i+1]]), data = mtcars)
p <- anova(fits[[i]], fits[[i+1]])$`Pr(>F)`
if(p >= 0.05) {
fomulas[[i+1]] <- fomulas[[i]]
fits[[i+1]] <- lm(as.formula(fomulas[[i+1]]), data = mtcars)
}
for (i in seq_along(terms)) {
fomulas[[i+1]] <- paste(fomulas[[i]], "+", terms[i])
fits[[i+1]] <- lm(as.formula(fomulas[[i+1]]), data = mtcars)
p <- anova(fits[[i]], fits[[i+1]])$`Pr(>F)`[2]
if(p >= 0.05) {
fomulas[[i+1]] <- fomulas[[i]]
fits[[i+1]] <- lm(as.formula(fomulas[[i+1]]), data = mtcars)
}
fits
fits[[length(fits)]]
fomulas[[length(fomulas)]]
x <- 1:10
y_5:15
y <- 5:15
quantile(x ~ y)
x <- rep(0:1, 10)
y <- sample(0:1, 20, replace = TRUE)
quantile(x ~ y)
x <- factor(x)
y <- factor(y)
quantile(x ~ y)
sqrt(0.23685)
0.23685^2
0.23685/0.0253768
0.0253768/0.23685
？diag
?diag
diag(1:10) <- 0
diag(1) <- 0
diag(3)
diag(10, 3, 4)
matrix(0,3,3)
matrix(9,3,3)
m <- matrix(0,3,3)
m
diag(m) <- 0
m
diag(m) <- 9
m
m <- matrix(1:9,3,3)
m
diag(m) <- 0
m
which(m > 4, arr.ind = TRUE)
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
data(faithful)
lm1 <- lm(eruptions ~ waiting,data=faithful)
sum((lm1$fitted.values - faithful$eruptions)^2)
mean((lm1$fitted.values - faithful$eruptions)^2)
(lm1$fitted.values - faithful$eruptions)^2
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
knitr::opts_chunk$set(echo = TRUE)
modFit2 <- train(classe ~ .,method="gbm",data=trainPC, verbose = FALSE,
trControl = trainControl(method="cv"))
training <- read.csv("data/training.csv", na.strings = c("", NA))
testing <- read.csv("data/testing.csv", na.strings = c("", NA))
library(caret)
NAs <- apply(training, 2, function(x) sum(is.na(x)))
iNAs <- which(NAs > 0)
training <- training[, -iNAs]
# str(training)
nzv <- nearZeroVar(training, saveMetrics = TRUE)
inzv <- which(nzv[,4] == TRUE)
training <- training[, -inzv]
# str(training)
trainingPara <- training[, -c(1:5, 59)]
correl <- abs(cor(trainingPara))
diag(correl) <- 0
corVar <- which(correl > 0.8, arr.ind = TRUE)
# set.seed(2332)
# folds <- createFolds(y = training$classe, k = 10,
#                      list = TRUE, returnTrain = TRUE)
# sapply(folds, length)
svd1 <- svd(trainingPara)
par(mfrow = c(1,2))
plot(1:length(svd1$d), (svd1$d)^2/sum((svd1$d)^2), xlab = "PC", ylab = "variance explained")
plot(1:length(svd1$d), cumsum((svd1$d)^2/sum((svd1$d)^2)),
xlab = "PC", ylab = "Cumulative variance explained")
preProc <- preProcess(trainingPara, method = "pca", pcaComp = 6)
trainPC <- predict(preProc, trainingPara)
trainPC <- data.frame(classe = training$classe, trainPC)
testingPara <- testing[, -iNAs]
testingPara <- testingPara[, -inzv]
testingPara <- testingPara[,-c(1:5, 59)]
preProcT <- preProcess(testingPara, method = "pca", pcaComp = 6)
testingPC <- predict(preProcT, testingPara)
testing <- data.frame(classe = testing$problem_id, testingPC)
modFit2 <- train(classe ~ .,method="gbm",data=trainPC, verbose = FALSE,
trControl = trainControl(method="cv"))
pred2 <- predict(modFit2, testing)
pred2
testing <- read.csv("data/testing.csv", na.strings = c("", NA))
testingPara <- testing[, -iNAs]
testingPara <- testingPara[, -inzv]
testingPara <- testingPara[,-c(1:5, 59)]
preProcT <- preProcess(testingPara, method = "pca", pcaComp = 6)
testingPC <- predict(preProcT, testingPara)
testingPC <- data.frame(classe = testing$problem_id, testingPC)
pred2 <- predict(modFit2, testingPC)
pred2
set.seed(2314)
modFit3 <- train(classe ~., method = "rf", data = trainPC,
trControl = trainControl(method="cv"))
modFit3 <- randomForest::randomForest(classe ~., data = trainPC,
trControl = trainControl(method="cv"))
pred3 <- predict(modFit3, testingPC)
pred3
pred4 <- predict(modFit4, testingPC)
modFit4 <- train(classe ~ .,method="glm",data=trainPC,
trControl = trainControl(method="cv"))
modFit3
modFit2
knitr::opts_chunk$set(echo = FALSE)
library(plotly)
setwd("C:/Users/xytan/Downloads/Github/DevDatProducts")
mtcars
